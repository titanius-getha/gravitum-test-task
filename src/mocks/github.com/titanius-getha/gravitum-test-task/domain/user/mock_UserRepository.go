// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	user "github.com/titanius-getha/gravitum-test-task/domain/user"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ID
func (_m *MockUserRepository) GetByID(ID uint) (user.User, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (user.User, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(uint) user.User); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ID uint
func (_e *MockUserRepository_Expecter) GetByID(ID interface{}) *MockUserRepository_GetByID_Call {
	return &MockUserRepository_GetByID_Call{Call: _e.mock.On("GetByID", ID)}
}

func (_c *MockUserRepository_GetByID_Call) Run(run func(ID uint)) *MockUserRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockUserRepository_GetByID_Call) Return(_a0 user.User, _a1 error) *MockUserRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetByID_Call) RunAndReturn(run func(uint) (user.User, error)) *MockUserRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with no fields
func (_m *MockUserRepository) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockUserRepository_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) Migrate() *MockUserRepository_Migrate_Call {
	return &MockUserRepository_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *MockUserRepository_Migrate_Call) Run(run func()) *MockUserRepository_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_Migrate_Call) Return(_a0 error) *MockUserRepository_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Migrate_Call) RunAndReturn(run func() error) *MockUserRepository_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *MockUserRepository) Save(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 user.User
func (_e *MockUserRepository_Expecter) Save(_a0 interface{}) *MockUserRepository_Save_Call {
	return &MockUserRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *MockUserRepository_Save_Call) Run(run func(_a0 user.User)) *MockUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User))
	})
	return _c
}

func (_c *MockUserRepository_Save_Call) Return(_a0 user.User, _a1 error) *MockUserRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Save_Call) RunAndReturn(run func(user.User) (user.User, error)) *MockUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
